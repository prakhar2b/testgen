import jinja2
from jinja2 import Environment, FileSystemLoader
import sys

file_loader = FileSystemLoader(searchpath="./")
env = Environment(loader=file_loader)


t = env.get_template('t.txt')

# t.txt generated by cookiecutter


class Feature(object):
	def __init__(self, d):
		for a, b in d.items():
			if isinstance(b, (list, tuple)):
			   setattr(self, a, [Feature(x) if isinstance(x, dict) else x for x in b])
			else:
			   setattr(self, a, Feature(b) if isinstance(b, dict) else b)

def get_elem_syntax(ltype, p_flag, lkey=None):

		#########################################################################
		####                  By Attribute (name, id)                    ########
		#########################################################################

		if ltype == "attribute":
			try:
				if lkey == "name":
					syn = "driver.find_elements_by_name(value)" if p_flag else \
							"driver.find_element_by_name(value)"

				elif lkey == "id":
					syn = "driver.find_elements_by_id(value)" if p_flag else \
							"driver.find_element_by_id(value)"

				else:
					syn = 'driver.find_elements_by_css_selector("[key=value]")' if p_flag else \
							'driver.find_element_by_css_selector("[key=value]")'


			except Exception as ex:
				print(ex)
		

		#########################################################################
		####                    By CSS Selector                          ########
		#########################################################################

		elif ltype =="css_selector":
			try:
				syn = "driver.find_elements_by_css_selector(value)" if p_flag else \
						"driver.find_element_by_css_selector(value)"

			except Exception as ex:
				print(ex)
		
		#########################################################################
		####                    By  xpath                                ########
		#########################################################################

		elif ltype == "xpath":
			try:
				syn = "driver.find_elements_by_xpath(value)"  if p_flag else \
						"driver.find_element_by_xpath(value)"

			except Exception as ex:
				print(ex)

		else:
			raise Exception("The locator type is not supported.")

		return syn



desc = ["This test does 1", "This test does 2", "This test does 3", "This test does 4", "This test does 5" ]
steps = [{'type': 'input', 'subtype':'textbox', 'text': 'dbmndbndbndjkbdkbdgbdgbdgbgdkbkgk', 'description': 'Enter text', 'locators': [{'type': 'attribute', 'key': 'name', 'value': 'q'}, {'type': 'attribute', 'key': 'title', 'value': 'Search'}], 'config': {'step_wait': '0'}}, {'type': 'click', 'description': 'Click search button', 'locators': [{'type': 'attribute', 'key': 'value', 'value': 'Google Search'}, {'type': 'css_selector', 'value': 'center > input', 'position': '3'}], 'config': {'step_wait': '0'}}, {'type': 'wait', 'description': 'Wait for 10 seconds', 'value': '30', 'until': 'url_changed', 'config': {'step_wait': '0'}}, {'type': 'assertion', 'assertionType': 'textExists', 'value': 'Your search - dbmndbndbndjkbdkbdgbdgbdgbgdkbkgk - did not match any documents', 'locators': [{'type': 'xpath', 'value': "//div[id='topstuff']/div/div/p"}], 'config': {'step_wait': '5'}}, {'type': 'assertion', 'assertionType': 'elementNotExists', 'locators': [{'type': 'attribute', 'key': 'id', 'value': 'ires'}], 'config': {'step_wait': '0'}}]
for step in steps:
	step = Feature(step)


x = zip(range(1,len(steps)+1),desc, steps)

out = t.render(x=x, get_elem_syntax=get_elem_syntax)
with open("test_g.py","w") as f:
     f.write(out)
